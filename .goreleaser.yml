env:
  - GO111MODULE=on
  - GOPROXY=https://gocenter.io
before:
  hooks:
    - go mod download
builds:
- env:
    - CGO_ENABLED=0
  binary: crypto
  goos:
    - linux
    - darwin
    - windows
  goarch:
    - 386
    - amd64
    - arm
    - arm64
  mod_timestamp: '{{ .CommitTimestamp }}'
  flags:
    - -trimpath
  ldflags:
    - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{ .CommitDate }} -X main.builtBy=goreleaser
checksum:
  name_template: '{{ .ProjectName }}_checksums.txt'
changelog:
  sort: asc
  filters:
    exclude:
    - '^docs:'
    - '^test:'
    - Merge pull request
    - Merge branch
    - go mod tidy
snapcrafts:
  -
    # ID of the snapcraft config, must be unique.
    # Defaults to "default".
    id: crypto

    # Build IDs for the builds you want to create snapcraft packages for.
    # Defaults to all builds.
    builds:
    - crypto

    # You can change the name of the package.
    # Default: `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}`
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"

    # Replacements for GOOS and GOARCH in the package name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.

    # The name of the snap. This is optional.
    # Default is project name.
    name: crypto

    # Whether to publish the snap to the snapcraft store.
    # Remember you need to `snapcraft login` first.
    # Defaults to false.
    publish: true

    # Single-line elevator pitch for your amazing snap.
    # 79 char long at most.
    summary: Cryptocurrency tool for the command-line.

    # This the description of your snap. You have a paragraph or two to tell the
    # most important story about your snap. Keep it under 100 words though,
    # we live in tweetspace and your description wants to look good in the snap
    # store.
    description: Crypto is a simple, robust command-line application that displays the price of popular cryptocurrencies.

    # A guardrail to prevent you from releasing a snap to all your users before
    # it is ready.
    # `devel` will let you release only to the `edge` and `beta` channels in the
    # store. `stable` will let you release also to the `candidate` and `stable`
    # channels. More info about channels here:
    # https://snapcraft.io/docs/reference/channels
    grade: stable

    # Snaps can be setup to follow three different confinement policies:
    # `strict`, `devmode` and `classic`. A strict confinement where the snap
    # can only read and write in its own namespace is recommended. Extra
    # permissions for strict snaps can be declared as `plugs` for the app, which
    # are explained later. More info about confinement here:
    # https://snapcraft.io/docs/reference/confinement
    confinement: strict

    # Your app's license, based on SPDX license expressions: https://spdx.org/licenses
    # Default is empty.
    license: Apache-2.0

    # A snap of type base to be used as the execution environment for this snap.
    # Valid values are:
    # * bare - Empty base snap;
    # * core - Ubuntu Core 16;
    # * core18 - Ubuntu Core 18.
    # Default is empty.
    base: core20

    # Add extra files on the resulting snap. Useful for including wrapper
    # scripts or other useful static files. Source filenames are relative to the
    # project directory. Destination filenames are relative to the snap prime
    # directory.
    # Default is empty.
    # extra_files:

    # Each binary built by GoReleaser is an app inside the snap. In this section
    # you can declare extra details for those binaries. It is optional.
    apps:

      # The name of the app must be the same name as the binary built or the snapcraft name.
      crypto:

        # If your app requires extra permissions to work outside of its default
        # confined space, declare them here.
        # You can read the documentation about the available plugs and the
        # things they allow:
        # https://snapcraft.io/docs/reference/interfaces.
        plugs: ["network"]

        # You can override the command name.
        # Defaults is the app name.
        # command: bin/crypto

        # Restart condition of the snap.
        # Defaults to empty.
        # https://snapcraft.io/docs/snapcraft-yaml-reference

    # Allows plugs to be configured. Plugs like system-files and personal-files
    # require this.
    # Default is empty.

dockers:
  - goos: linux
    goarch: amd64
    goarm: ''
  - image_templates:
    - json0/crypto:latest
    - json0/crypto:{ .Tag }
  dockerfile: Dockerfile
# - image_templates:
#   - 'goreleaser/goreleaser:{{ .Tag }}-amd64'
#   - 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}-amd64'
#   dockerfile: Dockerfile
#   use_buildx: true
#   binaries:
#   - goreleaser
#   build_flag_templates:
#   - "--pull"
#   - "--label=org.opencontainers.image.created={{.Date}}"
#   - "--label=org.opencontainers.image.name={{.ProjectName}}"
#   - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#   - "--label=org.opencontainers.image.version={{.Version}}"
#   - "--label=org.opencontainers.image.source={{.GitURL}}"
#   - "--platform=linux/amd64"
#   extra_files:
#   - scripts/entrypoint.sh
# - image_templates:
#   - 'goreleaser/goreleaser:{{ .Tag }}-arm64'
#   - 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}-arm64'
#   dockerfile: Dockerfile
#   use_buildx: true
#   binaries:
#   - goreleaser
#   build_flag_templates:
#   - "--pull"
#   - "--label=org.opencontainers.image.created={{.Date}}"
#   - "--label=org.opencontainers.image.name={{.ProjectName}}"
#   - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#   - "--label=org.opencontainers.image.version={{.Version}}"
#   - "--label=org.opencontainers.image.source={{.GitURL}}"
#   - "--platform=linux/arm64"
#   goarch: arm64
#   extra_files:
#   - scripts/entrypoint.sh
# docker_manifests:
# - name_template: 'goreleaser/goreleaser:{{ .Tag }}'
#   image_templates:
#   - 'goreleaser/goreleaser:{{ .Tag }}-amd64'
#   - 'goreleaser/goreleaser:{{ .Tag }}-arm64'
# - name_template: 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}'
#   image_templates:
#   - 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}-amd64'
#   - 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}-arm64'
# - name_template: 'goreleaser/goreleaser:latest'
#   image_templates:
#   - 'goreleaser/goreleaser:{{ .Tag }}-amd64'
#   - 'goreleaser/goreleaser:{{ .Tag }}-arm64'
# - name_template: 'ghcr.io/goreleaser/goreleaser:latest'
#   image_templates:
#   - 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}-amd64'
#   - 'ghcr.io/goreleaser/goreleaser:{{ .Tag }}-arm64'
# archives:
#   - name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'
#     replacements:
#       darwin: Darwin
#       linux: Linux
#       windows: Windows
#       386: i386
#       amd64: x86_64
#     format_overrides:
#     - goos: windows
#       format: zip
#     files:
#       - README.md
#       - LICENSE.md
#       - completions/*
# brews:
#   - tap:
#       owner: goreleaser
#       name: homebrew-tap
#     folder: Formula
#     homepage:  https://goreleaser.com
#     description: Deliver Go binaries as fast and easily as possible
#     license: MIT
#     test: |
#       system "#{bin}/goreleaser -v"
#     dependencies:
#     - name: go
#     install: |-
#       bin.install "goreleaser"
#       bash_completion.install "completions/goreleaser.bash" => "goreleaser"
#       zsh_completion.install "completions/goreleaser.zsh" => "_goreleaser"
#       fish_completion.install "completions/goreleaser.fish"
# scoop:
#   bucket:
#     owner: goreleaser
#     name: scoop-bucket
#   homepage:  https://goreleaser.com
#   description: Deliver Go binaries as fast and easily as possible
#   license: MIT
# nfpms:
#   - file_name_template: '{{ .ProjectName }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'
#     homepage:  https://goreleaser.com
#     description: Deliver Go binaries as fast and easily as possible
#     maintainer: Carlos Alexandro Becker <root@carlosbecker.com>
#     license: MIT
#     vendor: GoReleaser
#     formats:
#     - apk
#     - deb
#     - rpm
#     dependencies:
#     - git
#     recommends:
#     - golang
